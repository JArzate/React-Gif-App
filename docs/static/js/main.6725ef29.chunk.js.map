{"version":3,"sources":["Components/AddCategory.js","Helpers/getGifs.js","Components/GifItem.js","Components/GifGrid.js","Hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","cats","placeholder","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","title","GifItem","className","src","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,SACVP,GAAc,SAAAQ,GAAI,OAAKN,GAAL,mBAAmBM,OACrCL,EAAc,MAKlB,SACI,uBACIM,YAAY,aACZC,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC5BC,GAAID,EAAIC,GACRT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,IAClCY,MAAOJ,EAAII,UARI,kBAUZN,GAVY,4CAAH,sDCEPO,EAAU,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBT,EAAiB,EAAjBA,IAAKY,EAAY,EAAZA,MAC/B,OACI,sBAAKE,UAAU,6CAAf,UACI,qBAAKC,IAAKf,IACV,4BAAIY,QCDHI,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNY,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAkBtC,OAXAC,qBAAU,WAENvB,EAAQC,GAAUuB,MAAK,SAACX,GACpBS,EAAS,CACLd,KAAMK,EACNO,SAAS,SAIlB,CAACnB,IAEGoB,EDb0BI,CAAaxB,GAAjCY,EAJwB,EAI7BL,KAAaY,EAJgB,EAIhBA,QAMrB,OACI,qCACI,6BAAKnB,IAEJmB,GAAW,6CAEZ,qBAAKH,UAAU,WAAf,SAEQJ,EAAOH,KAAI,SAACgB,GAAD,OAEH,cAAC,EAAD,eAEQA,GADCA,EAAMd,aEM5Be,EA5BM,WAAO,IAAD,EAEWxC,mBAAS,CAAC,WAFrB,mBAElByC,EAFkB,KAEN1C,EAFM,KAIvB,OACI,qCACI,gDACA,cAAC,EAAD,CACIA,cAAeA,IAEnB,uBAGA,6BAEQ0C,EAAWlB,KAAI,SAACT,EAAU4B,GACtB,OAAO,cAAC,EAAD,CAEH5B,SAAUA,GADL4B,EAAI,IAAM5B,Y,MCd3C6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6725ef29.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from \"prop-types\"; \n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim()){\n            setCategories(cats => [inputValue,...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                placeholder=\"Buscar ...\"\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=VF3mP2KTWgl5u9uzxglkpi8lEcYIJJuy`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map((img) => ({\n        id: img.id,\n        url: img.images?.downsized_medium.url,\n        title: img.title\n    }));\n    return gifs;\n}","import React from 'react'\n\nexport const GifItem = ({ id, url, title }) => {\n    return (\n        <div className=\"gif-item animate__animated animate__fadeIn\">\n            <img src={url} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\n// import { getGifs } from '../Helpers/getGifs';\nimport { useFetchGifs } from '../Hooks/useFetchGifs';\nimport { GifItem } from './GifItem';\n\nexport const GifGrid = ({ category }) => {\n\n    // const [images, setImages] = useState([]);\n\n    const { data:images, loading } = useFetchGifs(category);\n\n    // useEffect(() => {\n    //     getGifs(category).then((images => setImages(images)));\n    // }, [category])\n\n    return (\n        <>\n            <h3>{category}</h3>\n\n            {loading && <p>Cargando ...</p> }\n\n            <div className=\"gif-grid\">\n                {\n                    images.map((image) => \n                         (\n                            <GifItem\n                                key={image.id}\n                                {...image}\n                            />\n                        )\n                    )\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../Helpers/getGifs\"\n\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        \n        getGifs(category).then((images)=>{\n            setState({\n                data: images,\n                loading: false\n            })\n        });\n\n    }, [category]);\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './Components/AddCategory';\nimport { GifGrid } from './Components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    let [categories, setCategories] = useState(['Naruto']);\n\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory\n                setCategories={setCategories}\n            />\n            <hr />\n\n\n            <ol>\n                {\n                    categories.map((category, i) => {\n                        return <GifGrid\n                            key={i + '_' + category}\n                            category={category}\n                        />\n                    })\n                }\n            </ol>\n        </>\n    );\n\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}